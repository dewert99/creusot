module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface
  type self
  type args
  predicate precondition (self : self) (a : args)
end
module CreusotContracts_Std1_Fun_FnOnceSpec_Precondition
  type self
  type args
  predicate precondition (self : self) (a : args)
end
module Core_Ops_Function_FnOnce_Output
  type self
  type args
  type output
end
module CreusotContracts_Std1_Fun_FnSpec_Postcondition_Interface
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnSpec_Postcondition
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Std1_Fun_FnSpec_FnMut_Interface
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Interface as Postcondition0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface as Resolve0 with type t = self
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = self,
  type args = args, type Output0.output = Output0.output
  function fn_mut (self : borrowed self) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_FnSpec_FnMut
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Interface as Postcondition0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface as Resolve0 with type t = self
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = self,
  type args = args, type Output0.output = Output0.output
  function fn_mut (self : borrowed self) (args : args) (res : Output0.output) : ()
  axiom fn_mut_spec : forall self : borrowed self, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res = Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res
end
module CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  predicate postcondition_once (self : self) (a : args) (res : Output0.output)
end
module CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  predicate postcondition_once (self : self) (a : args) (res : Output0.output)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Fun_FnSpec_FnOnce_Interface
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Interface as Postcondition0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = self
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce0 with type self = self,
  type args = args, type Output0.output = Output0.output
  function fn_once (self : self) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_FnSpec_FnOnce
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Interface as Postcondition0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = self
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce0 with type self = self,
  type args = args, type Output0.output = Output0.output
  function fn_once (self : self) (args : args) (res : Output0.output) : ()
  axiom fn_once_spec : forall self : self, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = Resolve0.resolve self /\ Postcondition0.postcondition self args res
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Std1_Fun_FnMutSpec_FnMutOnce_Interface
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = self
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce0 with type self = self,
  type args = args, type Output0.output = Output0.output
  function fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_FnMutSpec_FnMutOnce
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = self
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce0 with type self = self,
  type args = args, type Output0.output = Output0.output
  function fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
  axiom fn_mut_once_spec : forall self : self, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = (exists s : (borrowed self) .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s))
end
module Core_Ops_Function_FnOnce_CallOnce_Interface
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition0 with type self = self,
  type args = args
  val call_once [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { PostconditionOnce0.postcondition_once self args result }
    
end
module Core_Ops_Function_FnOnce_CallOnce
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition0 with type self = self,
  type args = args
  val call_once [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { PostconditionOnce0.postcondition_once self args result }
    
end
module C06FnSpecs_Weaken3_Interface
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = a
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce0 with type self = f,
  type args = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition0 with type self = f, type args = a
  val weaken_3 [@cfg:stackify] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 17 11 17 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 18 10 18 41] PostconditionOnce0.postcondition_once f a result }
    
end
module C06FnSpecs_Weaken3
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = a
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce as PostconditionOnce0 with type self = f, type args = a,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition as Precondition0 with type self = f, type args = a
  clone Core_Ops_Function_FnOnce_CallOnce_Interface as CallOnce0 with type self = f, type args = a,
  predicate Precondition0.precondition = Precondition0.precondition,
  predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
  type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = a
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = f
  let rec cfg weaken_3 [@cfg:stackify] [#"../06_fn_specs.rs" 19 0 19 67] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 17 11 17 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 18 10 18 41] PostconditionOnce0.postcondition_once f a result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _5 };
    _5 <- f_1;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    _0 <- ([#"../06_fn_specs.rs" 20 4 20 27] CallOnce0.call_once _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06FnSpecs_Weaken2_Interface
  type a
  type f
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = a
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = f
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = f,
  type args = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition0 with type self = f, type args = a
  val weaken_2 [@cfg:stackify] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 11 11 11 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 12 0 12 93] exists f2 : (borrowed f) .  * f2 = f /\ PostconditionMut0.postcondition_mut f2 a result /\ Resolve0.resolve ( ^ f2) }
    
end
module C06FnSpecs_Weaken2
  type a
  type f
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = a
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce as PostconditionOnce0 with type self = f, type args = a,
  type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = f
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut as PostconditionMut0 with type self = f, type args = a,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnMutSpec_FnMutOnce as FnMutOnce0 with type self = f, type args = a,
  predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
  predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
  predicate Resolve0.resolve = Resolve0.resolve, type Output0.output = Output0.output, axiom .
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition as Precondition0 with type self = f, type args = a
  clone C06FnSpecs_Weaken3_Interface as Weaken30 with type a = a, type f = f,
  predicate Precondition0.precondition = Precondition0.precondition,
  predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
  type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = a
  let rec cfg weaken_2 [@cfg:stackify] [#"../06_fn_specs.rs" 13 0 13 66] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 11 11 11 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 12 0 12 93] exists f2 : (borrowed f) .  * f2 = f /\ PostconditionMut0.postcondition_mut f2 a result /\ Resolve0.resolve ( ^ f2) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _5 };
    _5 <- f_1;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    _0 <- ([#"../06_fn_specs.rs" 14 4 14 18] Weaken30.weaken_3 _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06FnSpecs_Weaken_Interface
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = a
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Interface as Postcondition0 with type self = f, type args = a,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition0 with type self = f, type args = a
  val weaken [@cfg:stackify] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 5 11 5 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 6 10 6 36] Postcondition0.postcondition f a result }
    
end
module C06FnSpecs_Weaken
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = a
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = f
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut as PostconditionMut0 with type self = f, type args = a,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce as PostconditionOnce0 with type self = f, type args = a,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnMutSpec_FnMutOnce as FnMutOnce0 with type self = f, type args = a,
  predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
  predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
  predicate Resolve0.resolve = Resolve1.resolve, type Output0.output = Output0.output, axiom .
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = f
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition as Postcondition0 with type self = f, type args = a,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnSpec_FnOnce as FnOnce0 with type self = f, type args = a,
  predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
  predicate Resolve0.resolve = Resolve1.resolve, predicate Postcondition0.postcondition = Postcondition0.postcondition,
  type Output0.output = Output0.output, axiom .
  clone CreusotContracts_Std1_Fun_FnSpec_FnMut as FnMut0 with type self = f, type args = a,
  predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
  predicate Resolve0.resolve = Resolve0.resolve, predicate Postcondition0.postcondition = Postcondition0.postcondition,
  type Output0.output = Output0.output, axiom .
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition as Precondition0 with type self = f, type args = a
  clone C06FnSpecs_Weaken2_Interface as Weaken20 with type a = a, type f = f,
  predicate Precondition0.precondition = Precondition0.precondition,
  predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
  predicate Resolve0.resolve = Resolve1.resolve, type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = a
  let rec cfg weaken [@cfg:stackify] [#"../06_fn_specs.rs" 7 0 7 65] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 5 11 5 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 6 10 6 36] Postcondition0.postcondition f a result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _5 };
    _5 <- f_1;
    assume { Resolve2.resolve _6 };
    _6 <- a_2;
    _0 <- ([#"../06_fn_specs.rs" 8 4 8 18] Weaken20.weaken_2 _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
